// src/services/enhanced_api.js - TF-IDF Í∏∞Îä•Ïù¥ Ï∂îÍ∞ÄÎêú API ÏÑúÎπÑÏä§
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

class EnhancedWebtoonAPI {
  constructor() {
    this.baseURL = API_BASE_URL;
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    try {
      const response = await fetch(url, config);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error(`API request failed for ${endpoint}:`, error);
      throw error;
    }
  }

  // Í∏∞Ï°¥ APIÎì§
  async fetchWebtoons() {
    try {
      const data = await this.request('/api/webtoons');
      return data.success ? data.data : [];
    } catch (error) {
      console.error('Error fetching webtoons:', error);
      return this.getFallbackWebtoons();
    }
  }

  async fetchTagAnalysis() {
    try {
      const data = await this.request('/api/analysis/tags');
      if (data.success) {
        return {
          tag_frequency: data.data.tag_frequency,
          network_nodes: data.data.tag_frequency.slice(0, 20).map(([tag, count]) => ({
            id: tag,
            count: count,
            size: Math.min(count * 3, 50)
          })),
          network_links: []
        };
      }
      return null;
    } catch (error) {
      console.error('Error fetching tag analysis:', error);
      return this.getFallbackTagAnalysis();
    }
  }

  // ÏÉàÎ°úÏö¥ TF-IDF APIÎì§
  async fetchTFIDFAnalysis() {
    try {
      console.log('üîç TF-IDF Î∂ÑÏÑù ÏöîÏ≤≠ Ï§ë...');
      const data = await this.request('/api/analysis/tfidf');
      console.log('‚úÖ TF-IDF Î∂ÑÏÑù ÏùëÎãµ:', data);
      return data.success ? data.data : null;
    } catch (error) {
      console.error('‚ùå TF-IDF Î∂ÑÏÑù Ïã§Ìå®:', error);
      return this.getFallbackTFIDFAnalysis();
    }
  }

  async extractSummaryKeywords(text, maxKeywords = 10) {
    try {
      console.log('üîç ÌÇ§ÏõåÎìú Ï∂îÏ∂ú ÏöîÏ≤≠:', text.substring(0, 50) + '...');
      const data = await this.request('/api/analysis/summary-keywords', {
        method: 'POST',
        body: JSON.stringify({ 
          text: text, 
          max_keywords: maxKeywords 
        }),
      });
      console.log('‚úÖ ÌÇ§ÏõåÎìú Ï∂îÏ∂ú ÏôÑÎ£å:', data);
      return data.success ? data.data : null;
    } catch (error) {
      console.error('‚ùå ÌÇ§ÏõåÎìú Ï∂îÏ∂ú Ïã§Ìå®:', error);
      return null;
    }
  }

  async fetchEnhancedRecommendations(title, limit = 5, useTfidf = true, tfidfWeight = 0.4) {
    try {
      console.log(`üéØ Ìñ•ÏÉÅÎêú Ï∂îÏ≤ú ÏöîÏ≤≠: ${title} (TF-IDF: ${useTfidf})`);
      const data = await this.request('/api/recommendations/enhanced', {
        method: 'POST',
        body: JSON.stringify({ 
          title, 
          limit, 
          use_tfidf: useTfidf,
          tfidf_weight: tfidfWeight
        }),
      });
      console.log('‚úÖ Ìñ•ÏÉÅÎêú Ï∂îÏ≤ú ÏôÑÎ£å:', data);
      return data.success ? data.data : [];
    } catch (error) {
      console.error('‚ùå Ìñ•ÏÉÅÎêú Ï∂îÏ≤ú Ïã§Ìå®:', error);
      return this.getFallbackRecommendations(title);
    }
  }

  async fetchSimilarityAnalysis(title1, title2) {
    try {
      console.log(`üîó Ïú†ÏÇ¨ÎèÑ Î∂ÑÏÑù ÏöîÏ≤≠: ${title1} vs ${title2}`);
      const data = await this.request(`/api/analysis/similarity/${encodeURIComponent(title1)}/${encodeURIComponent(title2)}`);
      console.log('‚úÖ Ïú†ÏÇ¨ÎèÑ Î∂ÑÏÑù ÏôÑÎ£å:', data);
      return data.success ? data.data : null;
    } catch (error) {
      console.error('‚ùå Ïú†ÏÇ¨ÎèÑ Î∂ÑÏÑù Ïã§Ìå®:', error);
      return null;
    }
  }

  async fetchStatistics() {
    try {
      const data = await this.request('/api/stats');
      return data.success ? data.data : null;
    } catch (error) {
      console.error('Error fetching statistics:', error);
      return this.getFallbackStatistics();
    }
  }

  async checkHealth() {
    try {
      const data = await this.request('/health');
      return data;
    } catch (error) {
      console.error('Health check failed:', error);
      return { status: 'error', tfidf_ready: false };
    }
  }

  // Fallback Îç∞Ïù¥ÌÑ∞Îì§
  getFallbackWebtoons() {
    return [
      { 
        rank: 1, title: "ÌôîÏÇ∞Í∑ÄÌôò", 
        summary: "ÎåÄ ÌôîÏÇ∞Ìåå 13ÎåÄ Ï†úÏûê. Ï≤úÌïòÏÇºÎåÄÍ≤ÄÏàò Îß§ÌôîÍ≤ÄÏ°¥ Ï≤≠Î™Ö. Ï≤úÌïòÎ•º ÌòºÎûÄÏóê Îπ†Îú®Î¶∞ Í≥†Í∏àÏ†úÏùºÎßà Ï≤úÎßàÏùò Î™©ÏùÑ ÏπòÍ≥† Ïã≠ÎßåÎåÄÏÇ∞Ïùò Ï†ïÏÉÅÏóêÏÑú ÏòÅÎ©¥. Î∞± ÎÖÑÏùò ÏãúÍ∞ÑÏùÑ Îõ∞Ïñ¥ÎÑòÏñ¥ ÏïÑÏù¥Ïùò Î™∏ÏúºÎ°ú Îã§Ïãú ÏÇ¥ÏïÑÎÇòÎã§.",
        tags: ["ÌöåÍ∑Ä", "Î¨¥Ìòë", "Ïï°ÏÖò", "Î™ÖÏûë"], 
        interest_count: 1534623, rating: 9.88, gender: "ÎÇ®ÏÑ±", ages: "20ÎåÄ" 
      },
      { 
        rank: 2, title: "Ïã†Ïùò ÌÉë", 
        summary: "Ïã†Ïùò ÌÉë Íº≠ÎåÄÍ∏∞ÏóêÎäî Î™®Îì† Í≤ÉÏù¥ ÏûàÎã§Í≥† ÌïúÎã§. ÌÉëÏóê Îì§Ïñ¥Í∞Ä ÏãúÌóòÏùÑ ÌÜµÍ≥ºÌïòÎ©¥ÏÑú ÏúÑÎ°ú Ïò¨ÎùºÍ∞ÄÎäî Ïù¥ÏïºÍ∏∞. Í∞Å Ï∏µÎßàÎã§ Îã§Î•∏ ÏãúÌóòÍ≥º Í∞ïÎ†•Ìïú Ï†ÅÎì§Ïù¥ Í∏∞Îã§Î¶¨Í≥† ÏûàÎã§.",
        tags: ["ÌåêÌÉÄÏßÄ", "Ïï°ÏÖò", "ÏÑ±Ïû•"], 
        interest_count: 1910544, rating: 9.84, gender: "ÎÇ®ÏÑ±", ages: "20ÎåÄ" 
      },
      { 
        rank: 3, title: "Ïô∏Î™®ÏßÄÏÉÅÏ£ºÏùò", 
        summary: "Î™ªÏÉùÍ∏¥ Ïô∏Î™® ÎïåÎ¨∏Ïóê Í¥¥Î°≠ÌûòÏùÑ ÎãπÌïòÎçò Ï£ºÏù∏Í≥µÏù¥ Ïñ¥Îäê ÎÇ† ÏûòÏÉùÍ∏¥ Î™∏ÏúºÎ°ú Î∞îÎÄåÎ©¥ÏÑú Í≤™Îäî Ïù¥ÏïºÍ∏∞. Ïô∏Î™®Ïóê Îî∞Î•∏ Ï∞®Î≥ÑÍ≥º ÏÇ¨Ìöå Î¨∏Ï†úÎ•º Îã§Î£¨Îã§.",
        tags: ["ÎìúÎùºÎßà", "ÌïôÏõê", "Ïï°ÏÖò"], 
        interest_count: 824399, rating: 9.40, gender: "ÎÇ®ÏÑ±", ages: "10ÎåÄ" 
      },
      { 
        rank: 4, title: "ÎßàÎ•∏ Í∞ÄÏßÄÏóê Î∞îÎûåÏ≤òÎüº", 
        summary: "Í∞ÄÎÇúÌïú Î∞±Ïûë Í∞ÄÎ¨∏Ïùò Îî∏Ïù¥ Ï†ïÎûµÍ≤∞ÌòºÏùÑ ÌÜµÌï¥ Í≥µÏûëÍ∞ÄÎ°ú ÏãúÏßëÍ∞ÄÎ©¥ÏÑú ÌéºÏ≥êÏßÄÎäî Î°úÎß®Ïä§. ÎÉâÏ†ïÌïú Í≥µÏûëÍ≥º Îî∞ÎúªÌïú ÎßàÏùåÏùÑ Í∞ÄÏßÑ Ïó¨Ï£ºÏù∏Í≥µÏùò ÏÇ¨Îûë Ïù¥ÏïºÍ∏∞.",
        tags: ["Î°úÎß®Ïä§", "Í∑ÄÏ°±", "ÏÑúÏñë"], 
        interest_count: 458809, rating: 9.97, gender: "Ïó¨ÏÑ±", ages: "10ÎåÄ" 
      },
      { 
        rank: 5, title: "ÎÇò ÌòºÏûêÎßå Î†àÎ≤®ÏóÖ", 
        summary: "ÏÑ∏Í≥ÑÏóê ÎçòÏ†ÑÍ≥º ÌóåÌÑ∞Í∞Ä ÎÇòÌÉÄÎÇú ÏßÄ 10Ïó¨ ÎÖÑ. ÏÑ±ÏßÑÏö∞Îäî EÍ∏â ÌóåÌÑ∞Îã§. Ïñ¥Îäê ÎÇ† Ïù¥Ï§ë ÎçòÏ†ÑÏóêÏÑú Ï£ΩÏùÑ ÎªîÌïú ÏàúÍ∞Ñ, ÏãúÏä§ÌÖúÏù¥ ÎÇòÌÉÄÎÇòÎ©∞ Î†àÎ≤®ÏóÖÏùÑ Ìï† Ïàò ÏûàÍ≤å ÎêúÎã§.",
        tags: ["Ïï°ÏÖò", "Í≤åÏûÑ", "ÌåêÌÉÄÏßÄ", "ÏÑ±Ïû•"], 
        interest_count: 2156789, rating: 9.91, gender: "ÎÇ®ÏÑ±", ages: "20ÎåÄ" 
      },
    ];
  }

  getFallbackTagAnalysis() {
    const webtoons = this.getFallbackWebtoons();
    const tagFrequency = {};
    
    webtoons.forEach(item => {
      item.tags.forEach(tag => {
        tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
      });
    });

    const sortedTags = Object.entries(tagFrequency).sort(([,a], [,b]) => b - a);

    return {
      tag_frequency: sortedTags,
      network_nodes: sortedTags.map(([tag, count]) => ({
        id: tag, 
        count, 
        size: Math.min(count * 5, 50)
      })),
      network_links: []
    };
  }

  getFallbackTFIDFAnalysis() {
    return {
      global_keywords: [
        { keyword: 'Ï£ºÏù∏Í≥µ', avg_score: 0.85, rank: 1 },
        { keyword: 'Ïù¥ÏïºÍ∏∞', avg_score: 0.72, rank: 2 },
        { keyword: 'ÏÑ∏Í≥Ñ', avg_score: 0.68, rank: 3 },
        { keyword: 'Îä•Î†•', avg_score: 0.65, rank: 4 },
        { keyword: 'ÏÑ±Ïû•', avg_score: 0.62, rank: 5 },
        { keyword: 'ÏÇ¨Îûë', avg_score: 0.58, rank: 6 },
        { keyword: 'Î™®Ìóò', avg_score: 0.55, rank: 7 },
        { keyword: 'ÌïôÏõê', avg_score: 0.52, rank: 8 },
        { keyword: 'ÌåêÌÉÄÏßÄ', avg_score: 0.48, rank: 9 },
        { keyword: 'Î°úÎß®Ïä§', avg_score: 0.45, rank: 10 }
      ],
      webtoon_keywords: {
        "ÌôîÏÇ∞Í∑ÄÏõê": [
          { keyword: 'ÌôîÏÇ∞Ìåå', score: 0.92, rank: 1 },
          { keyword: 'Í≤ÄÏàò', score: 0.87, rank: 2 },
          { keyword: 'Ï≤úÎßà', score: 0.82, rank: 3 }
        ],
        "Ïã†Ïùò ÌÉë": [
          { keyword: 'ÏãúÌóò', score: 0.89, rank: 1 },
          { keyword: 'Íº≠ÎåÄÍ∏∞', score: 0.84, rank: 2 },
          { keyword: 'Ï∏µÎßàÎã§', score: 0.78, rank: 3 }
        ]
      },
      total_features: 1000,
      total_documents: 5,
      analysis_method: "TF-IDF with Korean preprocessing"
    };
  }

  getFallbackRecommendations(title) {
    const webtoons = this.getFallbackWebtoons();
    return webtoons.filter(w => w.title !== title).slice(0, 3).map(w => ({
      ...w,
      similarity: Math.random() * 0.8 + 0.2,
      jaccard_similarity: Math.random() * 0.6 + 0.2,
      tfidf_similarity: Math.random() * 0.7 + 0.1,
      common_tags: w.tags.slice(0, 2),
      target_keywords: ['Ï£ºÏù∏Í≥µ', 'Ïù¥ÏïºÍ∏∞'],
      candidate_keywords: ['Îä•Î†•', 'ÏÑ±Ïû•'],
      analysis_method: 'hybrid_tfidf_tags'
    }));
  }

  getFallbackStatistics() {
    return {
      total_webtoons: 5,
      avg_rating: 9.67,
      avg_interest: 645000,
      unique_tags: 15,
      tfidf_features: 1000,
      analysis_enhanced: true
    };
  }
}

export default new EnhancedWebtoonAPI();